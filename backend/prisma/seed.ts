import { PrismaClient, ConversationChannel, ConversationStatus, MessageRole} from '@prisma/client';

const prisma = new PrismaClient();

// Funci√≥n simple para hashear password (solo para demo)
function simpleHash(password: string): string {
  // En un entorno real, usar√≠amos bcrypt
  return `hashed_${password}`;
}

async function main() {
  console.log('üå± Iniciando seed de la base de datos...');

  // Crear usuarios de ejemplo (sin eliminar existentes para no romper demos)
  const demoUser = await prisma.user.upsert({
    where: { email: 'demo@versu.ai' },
    update: {},
    create: {
      email: 'demo@versu.ai',
      name: 'Usuario Demo',
      password: simpleHash('demo123'),
    }
  });

  const users = [
    demoUser,
    await prisma.user.upsert({
      where: { email: 'maria@empresa.com' },
      update: {},
      create: {
        email: 'maria@empresa.com',
        name: 'Mar√≠a Gonz√°lez',
        password: simpleHash('password123'),
      }
    }),
    await prisma.user.upsert({
      where: { email: 'carlos@startup.com' },
      update: {},
      create: {
        email: 'carlos@startup.com', 
        name: 'Carlos Ram√≠rez',
        password: simpleHash('password123'),
      }
    })
  ];

  console.log('‚úÖ Usuarios creados/actualizados');

  // Crear prompts de ejemplo
  const promptsData = [
    {
      name: 'Asistente Amigable',
      description: 'Un asistente joven y simp√°tico que ayuda con cualquier consulta',
      content: 'Eres un asistente virtual joven, simp√°tico y muy √∫til. Responde de manera amigable y conversacional, usando emojis ocasionalmente. Siempre trata de ser √∫til y positivo.',
      isActive: true
    },
    {
      name: 'Experto Tradicional',
      description: 'Un asistente formal y profesional con mucha experiencia',
      content: 'Eres un asistente virtual con muchos a√±os de experiencia. Respondes de manera formal, profesional y detallada. Usas un lenguaje t√©cnico cuando es apropiado.',
      isActive: false
    },
    {
      name: 'Gringo Principiante',
      description: 'Un asistente que habla espa√±ol pero como si fuera extranjero',
      content: 'Eres un asistente que habla espa√±ol pero no es tu idioma nativo. A veces cometes peque√±os errores gramaticales o usas expresiones en ingl√©s. Eres muy entusiasta.',
      isActive: false
    },
    {
      name: 'Consultor de Negocios',
      description: 'Un asistente especializado en temas empresariales y estrategia',
      content: 'Eres un consultor de negocios experimentado. Te especializas en estrategia empresarial, an√°lisis de mercado y optimizaci√≥n de procesos. Respondes con insights profundos.',
      isActive: false
    }
  ];

  const prompts: any[] = [];
  for (const promptData of promptsData) {
    const prompt = await prisma.prompt.upsert({
      where: { name: promptData.name },
      update: promptData,
      create: promptData
    });
    prompts.push(prompt);
  }

  console.log('‚úÖ Prompts creados/actualizados');

  // Crear conversaciones de ejemplo si no existen muchas
  const existingConversations = await prisma.conversation.count();
  
  if (existingConversations < 20) {
    console.log('üìù Creando conversaciones de ejemplo...');

    const currentDate = new Date();

    // Generar 30 conversaciones de los √∫ltimos 30 d√≠as
    for (let i = 0; i < 30; i++) {
      const daysAgo = Math.floor(Math.random() * 30);
      const conversationDate = new Date(currentDate);
      conversationDate.setDate(conversationDate.getDate() - daysAgo);

      const user = users[Math.floor(Math.random() * users.length)];
      const channels = [ConversationChannel.WEB, ConversationChannel.WHATSAPP, ConversationChannel.INSTAGRAM];
      const channel = channels[Math.floor(Math.random() * channels.length)];
      
      // 70% de conversaciones cerradas, 30% abiertas
      const status = Math.random() < 0.7 ? ConversationStatus.CLOSED : ConversationStatus.OPEN;
      
      // Solo conversaciones cerradas tienen rating
      const rating = status === ConversationStatus.CLOSED ? 
        (Math.random() < 0.8 ? // 80% tiene rating
          Math.floor(Math.random() * 3) + 3 : // Rating entre 3-5 (mayormente positivo)
          Math.floor(Math.random() * 2) + 1   // Rating 1-2 (ocasionalmente negativo)
        ) : null;

      const conversation = await prisma.conversation.create({
        data: {
          userId: user.id,
          channel,
          status,
          rating,
          createdAt: conversationDate,
          updatedAt: new Date(conversationDate.getTime() + Math.random() * 3600000) // 1 hora despu√©s m√°ximo
        }
      });

      // Crear mensajes para esta conversaci√≥n
      const messageCount = Math.floor(Math.random() * 6) + 2; // 2-7 mensajes
      
      const userMessages = [
        'Hola, necesito ayuda con mi cuenta',
        '¬øPuedes ayudarme con mi pedido #12345?',
        'Tengo una pregunta sobre el producto que compr√©',
        'No encuentro mi factura del mes pasado',
        '¬øC√≥mo puedo cambiar mi contrase√±a?',
        'Quiero cancelar mi suscripci√≥n premium',
        'El producto no funciona como esperaba',
        '¬øCu√°les son los horarios de atenci√≥n al cliente?',
        'Necesito soporte t√©cnico urgente',
        'Muchas gracias por toda la ayuda'
      ];

      const aiMessages = [
        '¬°Hola! Estoy aqu√≠ para ayudarte. ¬øEn qu√© puedo asistirte hoy? üòä',
        'Por supuesto, estar√© encantado de ayudarte con esa solicitud.',
        'Entiendo tu consulta. Perm√≠teme verificar esa informaci√≥n en nuestro sistema.',
        'He encontrado la informaci√≥n que necesitas. Aqu√≠ tienes todos los detalles:',
        'Para ayudarte de la mejor manera, ¬øpodr√≠as proporcionarme algunos detalles adicionales?',
        'Perfecto, he procesado tu solicitud. Todo est√° listo y actualizado.',
        'Excelente, he actualizado tu informaci√≥n en el sistema correctamente.',
        '¬øHay algo m√°s en lo que pueda ayudarte el d√≠a de hoy?',
        'Espero haber resuelto completamente tu consulta. ¬°Que tengas un excelente d√≠a! üåü',
        'Si necesitas m√°s ayuda en el futuro, no dudes en contactarnos nuevamente.'
      ];
      
      for (let j = 0; j < messageCount; j++) {
        // Alternar entre USER y AI, empezando por USER
        const role = j % 2 === 0 ? MessageRole.USER : MessageRole.AI;
        const messages = role === MessageRole.USER ? userMessages : aiMessages;
        const content = messages[Math.floor(Math.random() * messages.length)];
        
        const messageDate = new Date(conversationDate);
        messageDate.setMinutes(messageDate.getMinutes() + (j * 2)); // 2 minutos entre mensajes

        await prisma.message.create({
          data: {
            conversationId: conversation.id,
            content,
            role,
            promptUsed: role === MessageRole.AI ? prompts[0].name : null,
            responseTime: role === MessageRole.AI ? Math.floor(Math.random() * 3000) + 500 : null, // 500-3500ms
            createdAt: messageDate
          }
        });
      }
    }

    console.log('‚úÖ Conversaciones y mensajes creados');
  } else {
    console.log('‚ÑπÔ∏è  Ya existen suficientes conversaciones, saltando creaci√≥n');
  }

  // Estad√≠sticas finales
  const stats = {
    users: await prisma.user.count(),
    conversations: await prisma.conversation.count(),
    messages: await prisma.message.count(),
    prompts: await prisma.prompt.count()
  };

  console.log('\nüìä Estad√≠sticas de la base de datos:');
  console.log(`üë• Usuarios: ${stats.users}`);
  console.log(`üí¨ Conversaciones: ${stats.conversations}`);
  console.log(`üìù Mensajes: ${stats.messages}`);
  console.log(`ü§ñ Prompts: ${stats.prompts}`);
  console.log('\nüéâ ¬°Seed completado exitosamente!');
}

main()
  .catch((e) => {
    console.error('‚ùå Error en seed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  }); 